To create the infrastructure you're asking for with Terraform, we need to:

1. **Register the DNS domain** (`pykesys.com`) using AWS Route 53 (if you haven't already registered it elsewhere).
2. **Create two EC2 instances**: one for the web app and one for the database.
3. **Create an EFS file system** to be shared by both EC2 instances.

This Terraform configuration will cover these steps.

### Terraform Configuration Overview:
1. **AWS Route 53 for DNS registration** (if domain is registered via AWS).
2. **VPC** setup for networking.
3. **EC2 instances** setup for the web application and database.
4. **EFS** file system setup and mount configuration on both EC2 instances.

### Terraform Code

Here is an example Terraform configuration that will register the domain `pykesys.com`, create two EC2 instances, and mount an EFS volume to both instances:

```hcl
provider "aws" {
  region = "us-east-1" # Adjust region as needed
}

# 1. Create Route 53 Hosted Zone (for DNS registration)
resource "aws_route53_zone" "pykesys" {
  name = "pykesys.com"
}

# 2. VPC and Subnet Setup
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "webapp_subnet" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "db_subnet" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true
}

# 3. Security Groups
resource "aws_security_group" "allow_all" {
  name        = "allow_all"
  description = "Allow all inbound traffic"

  ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# 4. Create an EFS File System
resource "aws_efs_file_system" "main" {
  creation_token = "pykesys-efs"
  performance_mode = "generalPurpose"
}

resource "aws_efs_mount_target" "webapp_mount" {
  file_system_id  = aws_efs_file_system.main.id
  subnet_id       = aws_subnet.webapp_subnet.id
  security_groups = [aws_security_group.allow_all.id]
}

resource "aws_efs_mount_target" "db_mount" {
  file_system_id  = aws_efs_file_system.main.id
  subnet_id       = aws_subnet.db_subnet.id
  security_groups = [aws_security_group.allow_all.id]
}

# 5. Create EC2 WebApp Instance
resource "aws_instance" "webapp" {
  ami           = "ami-0c55b159cbfafe1f0" # Example AMI for Ubuntu (use one for your region)
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.webapp_subnet.id
  security_group = aws_security_group.allow_all.id

  user_data = <<-EOF
              #!/bin/bash
              sudo yum update -y
              sudo yum install -y nfs-utils
              sudo mkdir /mnt/efs
              sudo mount -t nfs4 -o nfsvers=4.1 ${aws_efs_file_system.main.dns_name}:/ /mnt/efs
              EOF
}

# 6. Create EC2 Database Instance
resource "aws_instance" "database" {
  ami           = "ami-0c55b159cbfafe1f0" # Example AMI for Ubuntu (use one for your region)
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.db_subnet.id
  security_group = aws_security_group.allow_all.id

  user_data = <<-EOF
              #!/bin/bash
              sudo yum update -y
              sudo yum install -y nfs-utils
              sudo mkdir /mnt/efs
              sudo mount -t nfs4 -o nfsvers=4.1 ${aws_efs_file_system.main.dns_name}:/ /mnt/efs
              EOF
}

# 7. Route 53 Record for WebApp DNS (example)
resource "aws_route53_record" "webapp" {
  zone_id = aws_route53_zone.pykesys.id
  name    = "webapp.pykesys.com"
  type    = "A"
  ttl     = 300
  records = [aws_instance.webapp.public_ip]
}

# Output EC2 instance public IPs and EFS DNS name
output "webapp_public_ip" {
  value = aws_instance.webapp.public_ip
}

output "database_public_ip" {
  value = aws_instance.database.public_ip
}

output "efs_dns_name" {
  value = aws_efs_file_system.main.dns_name
}
```

### Explanation of Key Sections

1. **AWS Provider**: The provider is set to use `us-east-1` as the region for AWS resources. You can change this based on your requirements.

2. **Route 53**:
   - We create a hosted zone for `pykesys.com` if the domain is registered with AWS Route 53.
   - We also create a DNS record `webapp.pykesys.com` to point to the public IP of the web app EC2 instance.

3. **VPC and Subnets**:
   - A simple VPC (`10.0.0.0/16`) with two subnets is created: one for the web application and another for the database.
   - These subnets are placed in different availability zones (`us-east-1a` and `us-east-1b`) for high availability.

4. **Security Groups**:
   - A security group `allow_all` is created to allow all inbound and outbound traffic to the EC2 instances.
   - This is a simplified approach; in a production environment, you'd want to tighten this to specific ports and IP ranges.

5. **EFS Setup**:
   - We create an EFS file system with the default `generalPurpose` performance mode.
   - Two **mount targets** are created, one in each subnet (for web app and database), allowing both EC2 instances to mount the same EFS volume.

6. **EC2 Instances**:
   - Two EC2 instances are created: one for the **web application** (`webapp`) and another for the **database** (`database`).
   - The **user_data** section in each EC2 instance includes a script to install the `nfs-utils` package (needed for EFS mounting) and mount the EFS file system.

7. **Route 53 DNS Record**:
   - A DNS A record is created in Route 53 to map `webapp.pykesys.com` to the public IP of the web app EC2 instance.

### Prerequisites
1. Ensure you have an AWS account and IAM permissions to create these resources.
2. If the domain `pykesys.com` is already registered with another provider (e.g., GoDaddy), you would need to manually update the nameservers with AWS Route 53 to use their DNS service.
3. Update the **AMI ID** in the `ami` fields with an appropriate Amazon Machine Image (AMI) for your region (Ubuntu, Amazon Linux, etc.).

### Applying the Configuration

1. Initialize Terraform:
   ```bash
   terraform init
   ```

2. Plan the changes:
   ```bash
   terraform plan
   ```

3. Apply the configuration:
   ```bash
   terraform apply
   ```

### Outputs

After applying the configuration, Terraform will output the following:
- **WebApp Public IP**: The public IP of the EC2 web app instance.
- **Database Public IP**: The public IP of the EC2 database instance.
- **EFS DNS Name**: The DNS name of the EFS file system for NFS mounting.

This Terraform configuration provides a basic setup for deploying an application with shared file storage across EC2 instances. Adjust as needed for your production environment, including improving security (e.g., refining security groups and using private subnets).


