Here is the revised Terraform configuration that includes a **Chef provisioner** for managing configuration management tasks during the deployment of EC2 instances. 

---

### **`main.tf`**
```hcl
provider "aws" {
  region = "us-east-1"
}

# IAM User for Terraform Management
resource "aws_iam_user" "pykesys_infra" {
  name = "pykesys-infra"
}

resource "aws_iam_user_policy" "pykesys_infra_policy" {
  name = "pykesys-infra-policy"
  user = aws_iam_user.pykesys_infra.name
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = "*"
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_user_login_profile" "pykesys_infra_login" {
  user     = aws_iam_user.pykesys_infra.name
  password = "TemporaryPassword123!"
  password_reset_required = true
}

resource "aws_iam_virtual_mfa_device" "pykesys_infra_mfa" {
  name = "pykesys-infra-mfa"
}

resource "aws_iam_user_mfa_device" "pykesys_infra_mfa_device" {
  user               = aws_iam_user.pykesys_infra.name
  serial_number      = aws_iam_virtual_mfa_device.pykesys_infra_mfa.arn
  authentication_code_1 = var.mfa_code_1
  authentication_code_2 = var.mfa_code_2
}

# IAM Roles for DB and App Access
resource "aws_iam_role" "pykesys_db_user" {
  name = "pykesys-db-user"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Effect    = "Allow"
        Principal = { Service = "ec2.amazonaws.com" }
      }
    ]
  })
}

resource "aws_iam_role" "pykesys_app_user" {
  name = "pykesys-app-user"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Effect    = "Allow"
        Principal = { Service = "ec2.amazonaws.com" }
      }
    ]
  })
}

# VPC and Subnet
resource "aws_vpc" "pykesys_vpc" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "pykesys_subnet" {
  vpc_id            = aws_vpc.pykesys_vpc.id
  cidr_block        = "10.0.1.0/24"
  map_public_ip_on_launch = true
}

# EFS Volume
resource "aws_efs_file_system" "pykesys_vol" {
  creation_token = "pykesys-vol"
  lifecycle_policy {
    transition_to_ia = "AFTER_30_DAYS"
  }
}

resource "aws_efs_mount_target" "pykesys_vol_mount" {
  file_system_id = aws_efs_file_system.pykesys_vol.id
  subnet_id      = aws_subnet.pykesys_subnet.id
  security_groups = [aws_security_group.efs_sg.id]
}

resource "aws_security_group" "efs_sg" {
  name        = "efs-sg"
  description = "Security group for EFS"
  vpc_id      = aws_vpc.pykesys_vpc.id

  ingress {
    from_port   = 2049
    to_port     = 2049
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Security Groups
resource "aws_security_group" "app_sg" {
  name        = "app-sg"
  description = "Security group for web app"
  vpc_id      = aws_vpc.pykesys_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "db_sg" {
  name        = "db-sg"
  description = "Security group for database server"
  vpc_id      = aws_vpc.pykesys_vpc.id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "noc_sg" {
  name        = "noc-sg"
  description = "Security group for NOC server"
  vpc_id      = aws_vpc.pykesys_vpc.id

  ingress {
    from_port   = 389
    to_port     = 389
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  ingress {
    from_port   = 8086
    to_port     = 8086
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Instances with Chef Provisioner
resource "aws_instance" "app_instance" {
  ami           = var.app_ami
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.pykesys_subnet.id
  security_groups = [aws_security_group.app_sg.name]

  provisioner "chef" {
    node_name      = "app-node"
    server_url     = "https://chef-server.example.com/organizations/pykesys"
    validation_client_name = "pykesys-validator"
    validation_key = file("pykesys-validator.pem")
    run_list       = ["recipe[nginx]", "recipe[php]"]
  }

  tags = {
    Name = "app.pykesys.com"
  }
}

resource "aws_instance" "db_instance" {
  ami           = var.db_ami
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.pykesys_subnet.id
  security_groups = [aws_security_group.db_sg.name]

  provisioner "chef" {
    node_name      = "db-node"
    server_url     = "https://chef-server.example.com/organizations/pykesys"
    validation_client_name = "pykesys-validator"
    validation_key = file("pykesys-validator.pem")
    run_list       = ["recipe[mysql]"]
  }

  tags = {
    Name = "db.pykesys.com"
  }
}

resource "aws_instance" "noc_instance" {
  ami           = var.noc_ami
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.pykesys_subnet.id
  security_groups = [aws_security_group.noc_sg.name]

  provisioner "chef" {
    node_name      = "noc-node"
    server_url     = "https://chef-server.example.com/organizations/pykesys"
    validation_client_name = "pykesys-validator"
    validation_key = file("pykesys-validator.pem")
    run_list       = ["recipe[openldap]", "recipe[influxdb]", "recipe[grafana]", "recipe[postfix]"]
  }

  tags = {
    Name = "noc.pykesys.com"
  }
}

# Route 53 Configuration
resource "aws_route53_record" "app" {
  zone_id = var.zone_id
  name    = "app.pykesys.com"
  type    = "A"
  ttl     = 300
  records = [aws_instance.app_instance.public_ip]
}

resource "aws_route53_record" "db" {
  zone_id = var.zone_id
  name    = "db.pykesys.com"
  type    = "A"
  ttl     = 300
  records = [aws_instance.db_instance.public_ip]
}

resource "aws_route53_record" "noc" {
  zone_id = var.zone_id
  name    = "noc.pykesys.com"
  type    = "A"
  ttl     = 300
  records = [aws_instance.noc_instance.public_ip]
}

resource "aws_route53_record" "redirect" {
  zone_id = var.zone_id
  name    = "pykesys.com"
  type    = "CNAME"
  ttl     = 300
  records = ["app.pykesys.com"]
}
```

---

### **`variables.tf`**
```hcl
variable "app_ami" {}
variable "db_ami" {}
variable "noc_ami" {}
variable "zone_id" {}
variable "mfa_code_1" {}
variable "mfa_code_2" {}
```

This configuration integrates Chef provisioners into the EC2 instances to run configuration management tasks upon instance creation. Let me know if further customization is needed!


